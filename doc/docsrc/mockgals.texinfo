\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename mockgals.info

@include ./docsrc/version.texi
@include ./docsrc/formath.texi

@settitle MockGals @value{VERSION}
@afourpaper

@dircategory Astronomy
@direntry
* mockgals: (MockGals).         Make mock galaxies and stars.
@end direntry

@c Use section titles in cross references, not node titles.
@xrefautomaticsectiontitle on
@c %**end of header







@copying
This manual is for MockGals (version @value{VERSION},
@value{UPDATED}), a program to make mock astronomical objects in a
FITS image and add the appropriate noise.

Copyright @copyright{} 2014 Mohammad Akhlaghi.
@email{akhlaghi@@astr.tohoku.ac.jp}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is available online at
@uref{http://www.gnu.org/copyleft/fdl.html, GNU FDL webpage}.
@end quotation
@end copying





@titlepage
@title MockGals
@subtitle Make mock stars and galaxies in a FITS image with noise.
@subtitle Manual for MockGals version @value{VERSION}, @value{UPDATED}.
@author Mohammad Akhlaghi

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@ifnottex
@node Top, About, (dir), (dir)
@top MockGals
MockGals is a tool to produce mock galaxies and stars based on an
input catalog, or randomly, into a FITS image of any given size. All
paramters to define mock galaxies and to define background noise are
easily configurable. We have tried to give a very complete overview of
how to install, understand and use MockGals version @value{VERSION}
(@value{UPDATED}) for your scientific research. We sincerely hope it
can be useful.

@ifhtml

To navigate easily in this webpage, you can use the @code{Next},
@code{Previous}, @code{Up} and @code{Contents} links in the top and
bottom of each page. @code{Next} and @code{Previous} will take you to
the next or previous topic in the same level, for example from chapter
1 to chapter 2 or vice versa. To go to the sections or subsections,
you have to click on the menu entries that are there when ever a
sub-component to a title is present.

To show the equations in some sections of this manual, we use the the
@url{http://www.mathjax.org/, MathJax}, JavaScript display
engine. Therefore to view the Math easily, you have to have JavaScript
enabled. If it is not enabled, you can still read the math if you are
familiar with how write equations in TeX: inline equations are marked
with @code{\(...\)} and equations that are positioned in the center of
a separate line for them selves (displayed mathematics) are marked
with @code{$$...$$}.
@end ifhtml
@end ifnottex

@menu
* About::                       This manual, why we wrote it and how to read it.
* Quick start::                 To get a fast start, have a look here.
* Introduction::                General introduction to the purpose and ideas.
* Installation::                Complete explanation on how to install MockGals.
* Configuring::                 Explanation on how to tell MockGals what to do.
* Mock Parameters::             The parameters that are input into MockGals.
* How it works::                Detailed explanation of the coding.
@end menu


@contents

@ifplaintext
@noindent
---------------------------

@noindent
Copyright notice:
@insertcopying
@end ifplaintext















@node About, Quick start, Top, Top
@chapter About

To get started with MockGals please please see @ref{Quick start}.  The
following sections in this chapter are more general discussions.
In the first section we will give a short review of the way modern
science has become intertwined with software and how important it is
for scientists to have very good understanding of the software they
use.  After that your rights as the reader of this document and user of
MockGals are explained and in the end of this chapter we give a short
review of how this manual is available for your use and a short
summary of the manual.







@menu
* Good Science::                Critical/Objective science and its software.
* Your rights::                 Your rights as a user of MockGals.
* Manual formats::              How to make the best use of this manual.
* Conventions::                 The conventions used in writing this manual.
* Summary::                     A summary of all this manual.
@end menu

@node Good Science, Your rights, About, About
@section Objective/critical science and its software
History of science shows us that no interpretation, model or technique
(software) is perfect.  There are always inevitably unseen faults,
hidden assumptions, simplifications and approximations in all of our
constructs. It is precisely these that will ultimately allow future
generations to find and correct or solve them, thus advancing our
experimental and theoretical knowledge of the universe. Therefore, we
should be as explicit as possible about such approximations and
simplifications. Through keeping software free and transparent (with a
clearly written, detailed and up to date manual) for all scientists,
we can most accurately convey our experiences to users who can build
on those or find their shortcomings, hence facilitating the progress
of science.

With the progress of technology, scientific results are increasingly
becoming more and more dependent on hardware and software
techniques. While in the past, a scientists would gather data and
process them individually to achieve an analysis, today scientits
mainly leave the first two steps to pre-written software libraries,
therefore distancing them selves from the pure observational data.

@quotation
Unfortunately, most persons who have recourse to a computer for
statistical analysis of data are not much interested either in
computer programming or in statistical method, being primarily
concerned with their own proper business. Hence the common use of
library programs and various statistical packages. Most of these
originated in the pre-visual era. The user is not showered with
graphical displays. He can get them only with trouble, cunning and a
fighting spirit. It's time that was changed.
@author F. J. Anscombe. The American Statistician, Vol. 27, No. 1. 1973
@end quotation

Anscombe argues that ``Good statistical analysis is not a purely
routine matter, and generally calls for more than one pass through the
computer''. He showed how four data sets with widely different shapes
(when plotted) give nearly identical output from standard regression
techinques. Thus he showed how wrong it is to only rely on outputs of
standard methods to interpret the data. Although we have much better
graphic displays today, unfortuantely the general situation has not
changed too much from Anscombe's time.  Obscure software, either
closed source or with a bad manual, is certainly one of the main
culprits.  Most of the software packages available today for a
scientist are either closed source or have a bad, out-dated or not
clearly written manual.  Making an interested scientist think twice
before trying to understand the inner workings of a software.  Thus
the wide use of free and transparent software may be one step in a
larger scheme to save the sciences...

@quotation
...from narrow specialization and from an obscurantist faith in the
expert's special skill and in his personal knowledge and authority; a
faith that so well fits our post-rationalistic and post critical age,
proudly dedicated to the destruction of the tradition of rational
philosophy and of rational thought its self.
@author Karl Popper. The logic of scientific discovery. 1959.
@end quotation

To reach this goal, namely to let the users of a software be able to
understand its intricate details at their will, a software has to be
accompanied by a good and up to date manual. The user of a software
cannot claim to understand how it works only based on the experience
they have gained by frequently using it. This kind of subjective
experience is prone to very serious mis-understandings that only help
in producing dogmas and the above mentioned ``obscurationist faith in
the expert's special skill''.  Unfortunately in the commonly used
astronomical softwares at least, most are either closed source or
don't have a good manual. The scientific results that are deduced from
such software are thus not objective, because in the former case
scientists have to look at it as a black box and trust its results on
faith or their subjective experience. In the latter, it is very hard
to find enough time to understand the programming of an open source
project without a clearly written and up to date manual explaining all
the ideas behind the major functions, data structures or objects.

It is certainly time consuming for the author of a software to make
such a manual. But if our greater common experience is considered,
that time, is a time well invested. Because through sharing of these
fundamental ideas and techniques, that define all our scientific
results, and keeping them open to criticism, we can make them more
robust and thus take better steps in our common goal to tackle the
riddles of nature. Also, through writing the manual, the programmer
gets to understand her/his own program and its strengths and
weaknesses much better, which can most of the time result in changes
in the program that will make it much more accurate and user friendly.

Bjarne Stroustrup (creator of the C++ language) says: ``Without
understanding software, you are reduced to believing in magic''.  Ken
Thomson (the designer or the Unix operating system) has says ``I abhor
a system designed for the ``user'' if that word is a coded pejorative
meaning ``stupid and unsophisticated''.'' No scientist would want to
be considered as ``stupid and unsophisticated'', so both these cases
naturally apply much more seriously to programs written for scientific
applications and as scientists we should be loyal to such principles
if we want to remain critical and be objective. 

All our data and models are produced, archived and processed using
hardware and software. If our aim in pursing science is tackling the
riddles of nature, and not merely stacking published papers with our
names on them, we cannot and should not accept any result through
faith in the programmer who wrote that particular program(s) which
determines all our scientific results.





@node Your rights, Manual formats, Good Science, About
@section Your rights as a user of MockGals

MockGals is ``free software''; this means that everyone is free to use
it and free to redistribute it on certain conditions. MockGals is not
in the public domain; it is copyrighted and there are restrictions on
its distribution, but these restrictions are designed to permit
everything that a good cooperating citizen would want to do.  What is
not allowed is to try to prevent others from further sharing any
version of MockGals that they might get from you.

Specifically, we want to make sure that you have the right to give
away copies of the programs that relate to MockGals, that you receive
source code or else can get it if you want it, that you can change these
programs or use pieces of them in new free programs, and that you know
you can do these things.

To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights.  For example, if you distribute
copies of the MockGals related programs, you must give the recipients
all the lrights that you have.  You must make sure that they, too,
receive or can get the source code.  And you must tell them their
rights.

Also, for our own protection, we must make certain that everyone finds
out that there is no warranty for the programs that relate to MockGals.
If these programs are modified by someone else and passed on, we want
their recipients to know that what they have is not what we distributed,
so that any problems introduced by others will not reflect on our
reputation.

The precise conditions of the licenses for the programs currently
being distributed that relate to MockGals are found in the General
Public license@footnote{ @url{https://www.gnu.org/copyleft/gpl.html}}
that accompany them.  This manual is covered by the GNU Free
Documentation License@footnote{
@url{https://www.gnu.org/copyleft/fdl.html}}.

The paragraphs above, in this section, belong to the GNU Texinfo manual
and are not written by us! We have just changed the name ``Texinfo''
to ``MockGals'' because it and this manual are released under the same
licenses and it is beautifully written to inform you of your rights.





@node Manual formats, Conventions, Your rights, About
@section Manual Formats and reading recommendations
This manual is available in plain text, HTML, Info, Docbook, PDF and
finally the Texinfo format. The last one is the basis for creating all
the other formats. As an initial introduction the PDF and HTML formats
might be easier to begin using MockGals, but if you would like to
understand the code while reading @ref{How it works}, it is much
easier to do so in the Info format. For example in Emacs, you can have
one window on the code and another on the Info versin of this manual
and follow the functions and explanations together.

Info is a very convenient format particularly useful for software
documentation. We strongly recommend becoming familiar with it if you
are not already because it can significantly enhance your experience
in programming and in your GNU based operating systems user
experience.  Operating systems like Ubuntu, Fedora, Linux Mint,
Debian, OpenSUSE, Red Hat, CentOS or Scientific linux among many
others. Info is very trivial and made for reading manuals. It provides
facilitates to navigate easily in long manuals. To learn more about it
in any GNU/linux terminal you can run: @command{$ info info}. It does
a fantastic job in explaining its self in practice interactively.

By default, the PDF version of this manual is prepared in the A4 paper
size (21.0cm by 29.7cm). In case you prefer a letter size (8.5in by
11in), you can simply change it by following the steps below. You must
have Texinfo and @TeX{} installed on your system, for an explanation
on how to install them see @ref{Installation}.

@enumerate
@item
In the downloaded source directory (lets call it @file{SRC/}), open
the @file{SRC/doc/mockgals.texinfo} Texinfo source file of this
manual.

@item
Delete the line that says @code{@@afourpaper}. It is in the first few
lines of the file.

@item
run @code{$ ./run.sh} in that same directory, this will re-make all
the documenation formats.
@end enumerate





@node Conventions, Summary, Manual formats, About
@section Conventions
@itemize
@item
Commands to be input into the command line as normal user begin with
@command{$}.

@item
Commands that to be input as root (or super-user), start with
@command{#}. Note that you need the root password in order to execute
the latter commands. To switch to the root user (or super-user) you
can simply run @command{$ su}. You will be prompted with a password
and if it is correct you will gain super-user privileges. 

@item
The @command{commands}, @option{-options}, @file{file_names},
@code{programming_codes} and keyboard @kbd{keys} in this manual are
written as they are written here. Be careful not to include text
puctuation marks that might follow them.

@item
When mentioning the order of menus to choose on a graphical user
interface application, we will list them like this example: ``File''
-> ``Save As'', which means to first click on the ``File'' menu and
then choose ``Save As'' in the list that opens.
@end itemize





@node Summary,  , Conventions, About
@section Summary
@ref{Quick start} is a quick start to get you going with MockGals.  It
explains the most frequently used inputs and outputs of mockgals so you can get started. Once you have used it in some simple situations and get a good understanding of what MockGals has to offer, you can go on with the rest of the manual.



















@node Quick start, Introduction, About, Top
@chapter A Quick start

Once MockGals is installed system wide, @pxref{Installation}, you can
simply run @command{$mockgals -nm} any where and, 45 mock galaxies and
5 stars will be randomly positioned in a square @code{FITS} image with
sides of 200 pixels. @ref{quickpreview} shows one such random example.
The central positions of some of these random profiles is
intentionally placed outside of the actual image range in order to be
more realistic. MockGals ignores objects that are completely out of
the image, but if even a small fraction of their area (within the
defined truncation radius) falls within the image, that part will be
included.

@float Figure, quickpreview
@center@image{./mockgals-figures/s1_noconv,5cm,,./mockgals-figures/s1_noconv.jpg,.jpg}@image{./mockgals-figures/s1_conv, 5cm,,./mockgals-figures/s1_conv.jpg,.jpg}@image{./mockgals-figures/s1_noised, 5cm,,./mockgals-figures/s1_noised.jpg,.jpg}

@caption{Three extentions of the output of @command{$mockgals
-nm}. Left: 45 galaxies and 5 stars with no convolution. Middle, The
same image after convolution. Right: After adding noise.}
@end float

After MockGals has finished, two files are added to the directory you
ran it in: @file{mock.fits} and @file{mockinfo.txt}. The first is
generally a multi-extension FITS file and the second is a text file
listing the properties of all the profiles that are positioned in this
image.

To view the full list of options, see @ref{Configuring} where all the
options are explained. The two options used here, namely @option{-m}
and @option{-n}, will output the desired image prior to convolution
(left in @ref{quickpreview}) and the convolved image prior to
adding noise (middle in @ref{quickpreview}) respectively. So if
you don't pass along these two options, you will only get the right
image of @ref{quickpreview}.





@menu
* InputOutput::                 Input and output into MockGals.
* Viewing multiextension FITS files::  How to easily view a multi-extention FITS.
@end menu




@node InputOutput, Viewing multiextension FITS files, Quick start, Quick start
@section Setting input and output

Normally, you wouldn't want MockGals to give you 45 random galaxies
and stars! You want to give it a list of galaxies with known
properties so MockGals can make those galaxies for you. The output
image size is determined on the command line by the @option{-x} and
@option{-y} options. The first sets the horizontal width and the
second the height of the output image, see @ref{Configuring} for more
information. 

MockGals reads the properties you want for the galaxies through an
ASCII table, a simple ASCII text file, where columns are separated by
white space or @kbd{TAB}. An example is the @file{mockinfo.txt} table
that was created above. The file name of the table you have created
with the profile properties can be specified with the @option{-i}
option. If it doesn't exist, MockGals will make the default 50 random
profiles (5 stars and 45 galaxies) as it did when you ran
@command{$mockgals -nm}. If you run this command again, one more time,
it is going to make exactly the same image it made the first time,
this is because if no input is given, it is going to read the profile
properties from @file{mockinfo.txt} and make an exact duplicate.

By default the output FITS file is named @file{mock.fits} you can also
ask for a different output file name through the option
@option{-o}. When reading for input, MockGals does not read the
columns that specify the total magnitude of the object. It will make
the profiles and then fill this column by its self. 




@node Viewing multiextension FITS files,  , InputOutput, Quick start
@section Viewing multi-extension FITS files

If you run @command{$mockgals} with the @option{-m} or @option{-n}
options, the output will be a multi-extention FITS file. Lets assume
you use SAOImage ds9@footnote{@url{http://ds9.si.edu/}} (from now on,
we'll call it ds9) to view FITS images, see @ref{Installing ds9}. If
you ordinarily open a multi-extension FITS file with ds9, by double
clicking on it or running @command{$ds9 foo.fits} for example, ds9
will only show you the first extension. To be able to switch between
the extensions you have to follow these menus in the ds9 window:
``File'' -> ``Open Other'' -> ``Open Multi Ext Cube'' and then choose
the Multi extension FITS file in your computer's file structure.

The method above is a little tedious to do every time you want view a
multi-extension FITS file. Fortunately ds9 also provides options that
you can add to it. One of those options is @option{-mecube} which
opens a FITS image as a multi-extension data cube, so on the command
line if you run @command{$ds9 -mecube foo.fits}, you can switch
between all the extensions that @file{foo.fits} might have. If
@file{foo.fits} only consists of one extension, then ds9 will open as
usual. 

It is really convenient if you set ds9 to always run with the
@option{-mecube} option on your graphical display. On a GNU/Linux
operating system, you can do this by following the following steps.
Right click on a FITS file and choose ``Properties''. Open the ``Open
With'' tab on top of the Properties window and click on the ``Add''
button. A list of applications will show up, ds9 might already be
present in the list, but don't choose it because it will run with no
options. Below the list is an option ``Use a custom
command''. Click on it and write the following command: @command{ds9
-mecube} in the box and click ``Add''. Then finally choose the command
you just added as the default and click the ``Close'' button.











@node Introduction, Installation, Quick start, Top
@chapter Introduction

Once the internal consistencies of theories has been verified, the
only method scientists have to test their theories are gathering data
from scientific experiments. For example in Physics and Chemistry
where we are an active element in the experiment, or through
observations, like in Astronomy where we are only passive observers to
the events that occur naturally. There is always an element of
uncertainty in our observations. We either don't completely understand
the nature of the subject we are observing or we think we understand
the nature fine enough but the data is diluted with a lot of noise, or
both, which is unfortunately the case most of the time.

In order to be able to tackle these two problems, before actually
doing any form of analysis on real data, a scientist first has to
calibrate the data analysis tools with a set of mock subjects where
s/he knows the exact nature of the data without noise. We also have to
simulate noise and any other instrumental defects that are bundled in
with the data and add them to the mock data to try to simulate a real
observation. The data analysis techniques that are applied to the real
data can then be first tested on the mock data to see how accurately
our method measures the properties we want it to measure in known
objects. Of course, whether our model actually resembles the data is
an issue we have to have accertained before this step.

This is the fundamental raison d'@^etre of MockGals. In astronomy,
faint objects or the fainter parts of bright objects are the most
curious aspects of the universe, simply because they are extremely
faint! They are either nearby faint objects or very distant bright
objects. Both are the most curious objects in Astronomy, and
understanding their nature is the primary reason behind investing so
much in larger ground and space based telescopes.

So any tool we use to observe such real galaxies, has to be first
tested with mock galaxies, because identifying a diffuse faint galaxy
in a large noise is extremely hard and prone to very serious
systematic bias if we don't test our detection methods accurately and
understand the systematic biases they inevitably have.

Mock galaxies can also be used to fit known parametric models to the
observed galaxies, for example suppose we have a real galaxy image and
we have a radial functional profile (for example the S@'ersic profile)
and we want to see what values of the free parameters of the S@'ersic
profile fit best with the observed galaxy, or more generally, if that
functional radial profile is suitable or not for that particular
object. In this case, we can make various mock 2D S@'ersic profiles
with various properties that have the observable properties of our
desired object and check to see which one best resembles the real
galaxy. This feature will be a future addition to MockGals. The
infra-structure for this capability is already in place, we just have
to find the time to add this capability.

Currently MockGals makes mock profiles on a 2D surface, but the
infra-structure is there to make the profiles on a 3D volume and find
a real projection of a real 3D object. This is also a future upgrade
we plan to apply.



@menu
* Object profiles.::            Detailed explanations of the profiles used.
* Why C::                       Why we chose the C langauge to write MockGals.
* Intro References::            References to the papers mentioned here.
@end menu

@node Object profiles., Why C, Introduction, Introduction
@section Object profiles

MockGals has been written for extra galactic studies, so the only
astronomical objects it can produce are stars and galaxies. In this
section we review how an ellipse with a certain functional form is
created and in the following sections the functional radial profiles
used for the PSF, stars and galaxies are explained separately.

@menu
* Defining an ellipse::         Defining an ellipse in 2D.
* Integration::                 How integration is preformed over a pixel.
* PSF::                         Radial profiles for the PSF.
* Stars::                       Making mock star profiles.
* Galaxies::                    Radial profiles for galaxies.
@end menu

@node Defining an ellipse, Integration, Object profiles., Object profiles.
@subsection Defining an ellipse

The PSF and galaxy radial profiles are generally defined on an ellipse
so in this section we will first review how an ellipse can be defined
on a 2D surface. Labeling the major axis of an ellipse @mymath{a}, and
its minor axis with @mymath{b}, the axis ratio is defined as:
@mymath{q\equiv b/a}. The major axis of an ellipse can be aligned in any
direction, we therefore define the angle of the major axis to the
horizontal axis of the image as position angle of the ellipse and in
this manual, we show it with @mymath{p}.

Our aim is to put a radial profile of any functional form @mymath{f(r)}
over an ellipse. Lets define the radial distance @mymath{r_{el}} as the
distance on the major axis to the center of the ellipse which is
located at @mymath{x_c} and @mymath{y_c}. We want to find the elliptical
distance of a point located at @mymath{(i,j)}, in the image coordiate
system, from the center of the ellipse. First we rotate the coordinate
system by @mymath{p} to get the new rotated coordiantes of that point
@mymath{(i_r,j_r)}:

@dispmath{i_r(i,j)=(i_c-i)\cos(p)+(j_c-j)\sin(p)}
@dispmath{j_r(i,j)=(j_c-j)\cos(p)-(i_c-i)\sin(p)}

@noindent The elliptical distance of a point located at @mymath{(i,j)} 
can now be defined as: @mymath{r_{el}^2=\sqrt{i_r^2+j_r^2/q^2} }. To
place the radial profiles explained below over an ellipse, we simply
calculate @mymath{f(r_{el}(i,j))} based on the functional radial profile
desired.





@node Integration, PSF, Defining an ellipse, Object profiles.
@subsection Integration over central regions
All the radial profiles made here become extremely sharp as we
approach the center of the profiles. This sharp change in the radial
profile will produce a strong gradient over the central few pixels of
the object. In those cases we will integrate @mymath{f(r)} over the
pixel area to find the pixel value. 

The building of the profile begins from its central pixel and
continues outwards. As we go to larger radii, the difference between
integration over the pixel area and using the central pixel distance
as a proxy for the whole pixel will become smaller. Therefore to
increase the preformance speed of MockGals, the user can define a
certain tollerance level beyond which only the central pixel value
will be used and no integration will be preformed.




@node PSF, Stars, Integration, Object profiles.
@subsection Point Spread function

Assume we have a ``point'' source. When we take an image of it, it
will ``spread'' over an area. To quantify that spread, we can define a
parametric ``function'', which we call the point spread function or
the PSF of the image. This ``spread'' can have various causes, for
example in ground based astronomy, due to the atmosphere. In practice
we can never surpass the ``spread'' due to the diffraction of our lens
aperture. Vairous other effects can also be quantified through a PSF,
for example, the simple fact that we are sampling in a discrete space,
namely the pixels, also produces a very small ``spread'' in the image
we take.

Since we want the total flux of an object to remain unchanged after
convolution by the PSF, in both cases, it is important that the sum of
all the pixels of the PSF be unity. The image also has to be a square
and have an odd number of pixels on its sides so one pixel can be
defined as the center. In MockGals, the PSF can be set by the two
methods explained below.

@table @asis

@item Parametric functions
A known mathematical function is used to make the PSF. In this case,
only the paramaters to define the functions are necessary and MockGals
will make a PSF based on the given parameters for each function. In
both cases, the center of the profile has to be exactly in the middle
of the central pixel of the PSF (which is automatically done by
MockGals). When talking about the PSF, usually, the FWHM is used as a
scale of the width of the PSF. This is because, identifying two point
sources that are FWHM appart is impossibe.

@table @cite
@item Gaussian
In the older papers, and to a lesser extent even today, some
researchers use the 2D gaussian function to approximate the PSF of
ground based images. In its most general form, a Gaussian function can
be written as:

@dispmath{f(r)=a \exp \left( -(x-\mu)^2 \over 2\sigma^2 \right)+d}

Since the center of the profile is pre-defined, @mymath{\mu} and
@mymath{d} are constrained. @mymath{a} can also be found because we want
the function to be normalized. So the only important parameter for
MockGals is the @mymath{\sigma}. In the Gaussian function we have this
relation between the FWHM and @mymath{\sigma}:
FWHM@mymath{=2\sqrt{2\ln{2}}\sigma \approx 2.35482\sigma}.

@item Moffat
The Gaussian profile is much sharper than the images taken from stars
on photographic plates or CCDs. Therefore in 1969, Moffat proposed
this functional form for the image of stars:

@dispmath{f(r)=a \left[ 1+\left( r\over \alpha \right)^2 \right]^{-\beta}}

Again, @mymath{a} is constrained by the normalization, therefore two
paramters define the shape of the Moffat function: @mymath{\alpha} and
@mymath{\beta}. The radial parameter is @mymath{\alpha} which is related
to the FWHM by @mymath{\alpha=}FWHM@mymath{/(2\sqrt{2^{1/\beta}-1})}.
Comparing with the PSF predicted from atmospheric turbulence theory
with a Moffat function, Trujillo et al. 2001 claim that
@mymath{\beta} should be 4.765.

@end table


@item An input FITS image
Pixel values from an input image will be used. As stated above, it is
extremely important for the input FITS image to be a square with odd
pixel sides. If the sum of the pixels of the input FITS image is not
unity, MockGals will divide all pixels by their sum to make it so.
@end table


Below, see @ref{MoffatGaussianComp}, you can see a comparison of the
Gaussian and Moffat profiles. All profiles have the same FWHM of 5
units. While the Gaussian is only dependent on the FWHM, the Moffat
function is also dependant on @mymath{\beta}. Therefore we have shown
the Moffat function for 4 @mymath{\beta} values.

@float Figure, MoffatGaussianComp
@center@image{./mockgals-figures/S3_MoffatGaussianComp,15cm,,./mockgals-figures/s3_MoffatGaussianComp.pdf,}
@caption{Comparison between the Gaussian and Moffat functions with
various @mymath{\beta} values. All 5 profiles have the same FWHM of 5
units.}
@end float

The results of comparing these functions can be summarized as:

@itemize
@item 
Within the FWHM, the functions don't have significant differences.
@item
The Gaussian function is much sharper than the Moffat functions, even
when @mymath{\beta} is large.
@item
For a fixed FWHM, as @mymath{\beta} increases, the Moffat function
becomes sharper.
@end itemize




@node Stars, Galaxies, PSF, Object profiles.
@subsection Star Profiles

In MockGals, we generally consider stars to be a point source. This is
usually the case for extra galactic studies, were nearby stars are
also in the field. Since a star is only a point source, we assume that
it only fills one pixel prior to convolution. Four such examples can
be seen in @ref{quickpreview} by comparing the left (prior to
convolution) and the middle (after convolution) images. Therefore the
final shape of a star can be considered as the shape of the PSF used
to make the mock images.

Infact, exactly for this reason, in astronomical images the light
profiles of stars are one of the best methods to understand the shape
of the PSF and a very large fraction of scientific research is
preformed by assuming the shapes of stars to be the PSF of the image.




 
@node Galaxies,  , Stars, Object profiles.
@subsection Galaxies

Today, most practitioners agree that galaxy profiles can be modeled
with one or a few generalized de Vaucouleur's (or S@'ersic) profiles.

@dispmath{I(r) = I_e exp \left ( -b_n \left[ \left( r \over r_e \right)^{1/n} -1 \right] \right )}

This profile depends on the effective radius (@mymath{r_e}) which is
defined as the radius which contains half of the total brightness of
the object. @mymath{I_e} is the surface brightness at the effective
radius.  The S@'ersic index @mymath{n} is used to define the
concentration of the profile within @mymath{r_e} and @mymath{b_n} is a
constant dependent on @mymath{n}. MacArthur et al. 2003 show that for
@mymath{n>0.35}, @mymath{b_n} can be accurately approximated using this
equation:

@dispmath{b_n=2n - {1\over 3} + {4\over 405n} + {46\over 25515n^2} + {131\over 1148175n^3}-{2194697\over 30690717750n^4}}
 
Below, see @ref{SersicComp}, 5 example S@'ersic profiles with various
@mymath{n} values are shown. All the profiles have been divided by their
central value in order to compare their behavior especially in the
central parts of the profile

@float Figure, SersicComp
@center@image{./mockgals-figures/S3_SersicComp,15cm,,./mockgals-figures/S3_SersicComp.pdf,}
@caption{S@'ersic profiles with various @mymath{n} values, all profiles have the same @mymath{r_e=5} units.}
@end float

deVaucouleurs 1948 was actually first showed that this function best
fits the galaxy light profiles, with the only difference that he held
@mymath{n} fixed to a value of 4. 20 years later, S@'ersic 1968 showed
that @mymath{n} can have a variety of values and does not necessarily
have to be 4.





@node Why C, Intro References, Object profiles., Introduction
@section Why C programming language?

Currently the programming language that is most commonly used in
scientific applications is the C++ language, not plain C. One of the
main reasons behind this choice is that through the Object Oriented
programming pradigm, the C++ language offers a much higher level of
abstraction.

But we have chosen the C programming language to write MockGals. The
reasons can be summarized with simplicity and speed. Both are
extremely important in a scientific software. A simple comparison of
the main books of the two langauges can act as a guide. The C
programming language book is only 286 pages and covers a very good
fraction of the language, it has also remained unchanged from
1988. The C++ programming language (fourth edition, 2013) book on the
other hand has 1366 pages! As discussed in @ref{Good Science}, it is
very important for other scientists to be able to readily read the
code of a program at their will with minimum requirements.

In C++, inheriting objects and their internal functions make the code
very easy to write for the programmer who is deeply invested in those
objects and understands all their relations well. But it
simultaneously makes reading the program for a first time reader
extremely hard, since before understanding the methods, they have to
invest a lot of time in understanding those objects and their
relations. But in C, if you only stick to simple structures, as we
have here, all the inputs and outputs to functions can be given as the
basic language types for example @code{int}s or @code{float}s and
their pointers to define arrays. So when an outside reader is only
interested in one part of the program, that part is all they have to
understand.

Being a very low level (closer to the hardware) language, C also
allows for much more closer relation to the actual data we have in our
disposal, rather than the illusion of high-level abstractions that the
higher level languages provide. The GNU coding standards also encourage
the use of C over all other languages when generality of usage and
``high speed'' is desired.

@node Intro References,  , Why C, Introduction
@section References

@noindent
de Vaucouleurs, G. (1948). ``Recherches sur les nebuleuses
extragalactiques''. In: Journal des Observateurs 31, p. 113.

@noindent
MacArthur, L. A., S. Courteau, and J. A. Holtzman (2003). ``Structure of
Disk-dominated Galaxies. I. Bulge/Disk Param- eters, Simulations, and
Secular Evolution''. In: ApJ 582, pp. 689---722.

@noindent
Moffat, A. F. J. (1969). ``A Theoretical Investigation of Focal
Stellar Images in the Photographic Emulsion and Application to
Photographic Photometry''. In: A&A 3, p. 455.

@noindent
Sersic, J. L. (1968). Atlas de galaxias australes.

@noindent
Trujillo, I., J. A. L. Aguerri, J. Cepa, and C. M. Gutierrez
(2001). ``The effects of seeing on S@'ersic profiles - II. The Moffat
PSF''. In: MNRAS 328, pp. 977---985.













@node Installation, Configuring, Introduction, Top
@chapter Installation
To install MockGals, there are three requirements which are all very
easy to setup on your GNU/Linux system. Here is a short list:

@itemize
@item
GNU scientific library, @url{http://www.gnu.org/software/gsl/, GSL},
which is mainly used to generate random numbers (for noise mainly) and
integration over the surface of pixels.

@item 
Fastest Fourier Transform in the West, @url{http://www.fftw.org/,
FFTW}, which is used for convoling the actual profiles of the stars
and galaxies with the PSF.

@item 
@url{http://heasarc.gsfc.nasa.gov/fitsio/fitsio.html, CFITSIO}, which
is the C library to create and manipulate FITS images.

@item 
@url{http://ds9.si.edu/, SAOImage DS9} which is not required for MockGals to
work! It is only a tool to view FITS images.
@end itemize

So far we have only tested the installation of MockGals on a
Scientific Linux (SL) 6.5 machine. SL is a distribution of Linux based
on the Red Hat enterprise linux (RHEL). RHEL is also the base for
other common operating systems like Fedora and CentOS, so there
shouldn't be much difference. But since the explanations below are all
based on compiling from source, the explanations below should
generally be applicable on any
@url{http://en.wikipedia.org/wiki/Linux_distribution, GNU/Linux based
operating system}.

@menu
* Requirements::                How to install the required software
* MockGals Install::            Installing MockGals
@end menu





@node Requirements, MockGals Install, Installation, Installation
@section Installing requirements
In GNU/Linux operating systems, installing most programs from source
is extremely easy. Generally, the following three commands have to be
run in sequence. Lets call the compressed file you download from the
software's webpage @file{downloaded.tar.gz}. After you un-compress it
with the first command below, lets suppose you get @file{untared_dir}.

@example
$ tar zxvf downloaded.tar.gz
$ cd untared_dir
$ ./configure
$ make
$ su 
# make install
# exit
@end example

@noindent
Note that the second last command has to be run as root or superuser,
see @ref{Conventions}. That is why the third last command is
@command{$su}, which is short for ``switch user''. It will prompt you
with a request to provide the root password when no user name is
provided. Since you want to be able to use the libraries of these
three packages it is best that you do install them system wide by
going through all the steps. The last command simply disables the root
privileges and returns you back to your own user ID. It is best to
avoid remaining root for a long time, because you might accidentally
to something very harmful!

The sequence above is enough for the first two programs in the list,
namely GSL and FFTW, but CFITSIO needs a slight modification and ds9
doesn't use this sequence at all, it is available as already compiled
from the webpage.To install CFITSIO, you just have to add the
following flags (those that start with a @command{--}) after the
@command{$./configure} command, so it becomes:

@example
$ ./configure --enable-sse2 --prefix=/usr/local --enable-reentrant 
@end example

@noindent
The first flag is for increasing the reading and writing speed and
only works for a 64 bit systems. If you are on a 32 bit system, don't
include it. The second one says where to put the final compiled
libraries, the given value is the standard place to put them. The last
one is if you want to access the fits files in a multithread manner.





@menu
* Installing ds9::              How to install SAOImage ds9
@end menu

@node Installing ds9,  , Requirements, Requirements
@subsection Installing SAOImage ds9
From the webpage ``SAOImage DS9 is an astronomical imaging and data
visualization application.'' This is actually a very useful, simple
and easy Graphical User Interface (GUI) application for you to view
the fits images and do simple operations on them. 

@itemize
@item
@url{http://ds9.si.edu/site/Download.html,Download} the compressed
    binary file based on your operating system.  
@item
Unpack it with @command{$ tar zxvf [filename]}

@item
Copy the ds9 file to a system wide location (as root): @command{# mv
ds9 /usr/local/bin}.
@end itemize

By typing ds9 any where in the command line you can begin using it,
you can also set your GNU/Linux Graphic user interface to open any
FITS file with ds9, we recommend to define it to open any FITS image
as a multiextension FITS image, see @ref{Viewing multiextension FITS
files} for an explanation on how to do that.

XPA is the ``X Public Access'' mechanism, its a messaging system in
DS9 that allows e.g. host scripts to load images or control the
display. After running ds9, if you get an error regarding XPA enter
these commands if you are using the bash shell (default in GNU/Linux):

@example
$ cd ~
$ vim .bashrc
@end example

Once inside vim, press @kbd{i} to be able to insert text, add
@code{export XPA_METHOD=local}. Save by pressing @kbd{Esc} first and
then @kbd{ZZ} (the @kbd{Shift} and @kbd{z} keys together,
twice). @kbd{Esc} followed by @kbd{:wq} can also be used.

To stop this command when you run ds9 from the Graphic User Interface,
follow the above procedures on @file{~/.profile} also, if you don't
already have that file, don't worry, the second command will create
it. But have in mind that you need to log out and log-in again for
this change to take effect.




@node MockGals Install,  , Requirements, Installation
@section Installing MockGals
The source code for MockGals is avilable
@url{https://github.com/makhlaghi/mockgals, on Github}. As with any
program that is available there, you have two options to download it.

@itemize
@item 
In Github's webpage, find the ``Download ZIP'' button on the right
side of the screen and Download the zip file. This will download
@file{mockgals-master.zip} to your computer (probably in your
@file{Downloads} directory). You can then un-compress the file by
runnnig @command{$ unzip mockgals-master.zip}. This will create the
directory @command{mockgals-master} in that directory. You can change
your directory with @command{$ cd mockgals-master}.

@item
Alternatively, you can simply clone the whole repository with the
following command in any directory. ``Cloning'' is used in Git to
refer to downloading the whole version control history of the
repository along with the actual files necessary to install and run
it. A directory named @file{mockgals} will be created and you can
enter it with @command{$ cd mockgals}.

@example
$ git clone https://github.com/makhlaghi/mockgals.git
@end example

@end itemize

The number of requirements for MockGals is currently not too
much. Therefore we haven't set up the @command{$./configure}
installing script like the three required programs. So how ever you
downloaded the source code, once you are in the directory, you can
simply run @command{$ make} and @command{# make install}, don't forget
that the second has to be run as root, see @ref{Conventions}.




















@node Configuring, Mock Parameters, Installation, Top
@chapter Configuring MockGals
Currently, the only way you can configure MockGals and ask it to do
various actions is through command line options. MockGals is
compatible with the
@url{http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html,POSIX
recommendations for command line arguments}. A summary of the points
are as follows:

@itemize
@item
Arguments are options if they begin with a hyphen delimiter (@option{-}).

@item
Multiple options may follow a hyphen delimiter in a single token if
the options do not take arguments. Thus, @option{-abc} is equivalent
to @option{-a -b -c}.

@item
Certain options require an argument (for MockGals, they are identified
below).

@item
An option and its argument may or may not appear as separate
tokens. (In other words, the whitespace separating them is optional.)
Thus, @option{-o foo} and @option{-ofoo} are equivalent.

@item
The argument @option{--} terminates all options; any following arguments are treated as non-option arguments, even if they begin with a hyphen.

@item
Options may be supplied in any order, or appear multiple times. In
MockGals, for those options with arguments, this will ignore all
previous values assigned to that option.
@end itemize

MockGals has three types of options. Those that don't actually run
MockGals, those that don't require arguments and those that do. Below
you can see an explanation for each type. The second two types of
options have pre-defined default values set for them when MockGals
begins. Therefore you only need to call MockGals with an option, if
you want to change its value.

If you do not supply any options or arguments to MockGals, it will
make 45 random galaxy profiles and 5 random stars positioned in a
square fits image of side 200 pixels. This was actually used in
@ref{Quick start}, where we only added two ON/OFF options. Try
removing those options to see the output.

@menu
* Informative options::         Options that don't run MockGals.
* No argument options::         Options without arguments.
* Options with arguments::      Options that require arguments.
@end menu




@node Informative options, No argument options, Configuring, Configuring
@section Informative options
Sometimes you don't actually want to run MockGals, you just want to
know what version it is or you want to see a list of its options and
their default values and you don't feel like finding this manual to
browse it and find this section! The options here are made exactly 
with this purpose in mind.

If you supply any other options along with these options, they will be
totally ineffective and MockGals will abort after doing what these
options ask it to do.

@table @option
@item -h
Running MockGals with this option will print the full list of options
available to you along with a short explanation and the default value
of each option.  The type of argument (string, integer or float) is
also specified to guide you in the values to assign to each option.

@item -v
Print the version and copyright  information for MockGals. Here is how
this looks for its first release.

@example
MockGals 0.1
============
Make mock stars and galaxies in a FITS image.

Copyright (C) 2014  Mohammad Akhlaghi
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
modify and redistribute it under the
GNU Public License v3 or later.
@end example


@end table





@node No argument options, Options with arguments, Informative options, Configuring
@section Options with no arguments

Some of the configurations that can define MockGals behavior can be
thought of as ON/OFF options. You don't need to give it any value, you
just turn the switch ON or OFF. These options are listed below.

By default all these options are switched OFF unless you call them.

@table @option
@item -e
Verbose mode. If this option is called (is switched on), MockGals will
report every step it takes in making the mock image. 

@item -p
View the PSF. This is useful if you have asked MockGals to make a
functional PSF and you want to see how the PSF its self looks. If this
option is called, as soon as MockGals makes the PSF, it will save it
into @file{psf.fits}.

@item -m
Save unconvolved mock image as an extention of the output FITS
image. If this option is activated, MockGals will save a copy of the
image before it gets convolved with the PSF. This image will be saved
as an extention to the output file. So by switching between different
extentions, you can see how convolution and noise have affected the
otherwise perfect initial image. As an example, please see the left
image of @ref{quickpreview}.

@item -n
Save the convolved mock image as an extention of the output FITS
image.  If this option is activated, the image is saved right before
noise is added. See the middle image in @ref{quickpreview}. 

@end table





@node Options with arguments,  , No argument options, Configuring
@section Options with arguments

Some of the options require arguments. If you don't supply any,
MockGals will complain and abort. A list of them can be seen below.

In this list, after each option the terms @option{INTEGER},
@option{FLOAT} or @option{FILENAME} can be seen, these terms show the
type of argument that each gets. If floating point value is given
instead of an integer, only its integer section will be used. In other
cases supplying the wrong type or argument to an option is not defined 
and might result in unexpected out comes.

@table @option
@item -x INTEGER
The argument to this option will be the number of pixels in the
horizontal axis of the output image as viewed in ds9. The input to
this option has to be as positive (@mymath{>0}) integer. The default 
value for this option is 200.

@item -y INTEGER
Similar to @option{-x} but for the vertical axis of the output
image. The default value is 200.

@item -i FILENAME
This is the name of the input ASCII text file. It can have any number
of comments (lines begining with @code{#}). It has to be space
separated table that is composed of 9 columns. The default file name
is @file{mockinfo.txt}.

@item -o FILENAME
The name of the output FITS image. Default is @file{mock.fits}.

@item -s FLOAT
The Background value. The main effect of this value is on the noise,
because the background noise standard deviation is the square root of
this value summed with the object pixel values. A larger argument to
this option will result in more significant noise. Default is 10000
counts or electrons.

@item -t FLOAT
The mock profiles do not extend to infinity! With this option you can
set the radial extent of the profile to be made. By default it is set
to 5.0. For each type of profile, this value will determine where to
stop building the profile.
@table @asis
@item S@'ersic
The argument to this option will be multiplied by the effective radius
(@mymath{r_e}) of the profile, see @ref{Galaxies}.

@item Gaussian
The argument to this function will be multiplied by
@mymath{\sigma}. For a Gaussian the input radial parameter is the
FWHM, MockGals converts that to @mymath{\sigma}, see @ref{PSF}.

@item Moffat
Half of the FWHM is multiplied to the argument of this function to set
a limit to the Moffat profile, see @ref{PSF}.
@end table

@item -f FILENAME
In case a given FITS image is to be used as the PSF of the image, its
file name has to be specified with this option. The FITS image has to
have sides that are odd numbers. It doesn't matter if the sum of its
pixel values are unity or not, if they aren't MockGals will multiply
all the pixels by the inverse of the sum so that it does become unity.
If a file is specified, @option{-u}, @option{-a} and @option{-b} will
be ignored.

@item -u INTEGER
Determine the functional form of a PSF. Any value other than the two
shown below will be changed to the default value which is 1 (Moffat
function).
@enumerate
@item
Moffat function.

@item
Gaussian function.
@end enumerate

@item -a FLOAT
PSF FWHM in pixels. Default value is 5.

@item -b FLOAT
Moffat function's @mymath{\beta}, see @ref{PSF}. In case a Gaussian is
asked for, this value is ignored. Default is 3.

@item -g INTEGER
For Histogram. If the argument to this function is zero, no histogram
will be calculated. If it is any positive value, the positive value
will be set as the number of bins of a histogram. A negative value
will abort, default is 0.

@item -c FLOAT
For Histogram. Minimum histogram value, default: -250.

@item -d FLOAT
For Histogram. Maximum histogram value, default: 700.


@end table














@node Mock Parameters, How it works, Configuring, Top
@chapter Mock parameters
The parameters of the profiles you want to build into a FITS image are
fed to it though a table. In this section we will review how MockGals
reads that table and how best to prepare it.




















@node How it works,  , Mock Parameters, Top
@chapter How mockgals works
In this section we will give a complete review on how MockGals works
and how this is implemented in its coding in order to facilitate your
reading of the code and possibly modifying it and making it better.




















@bye
