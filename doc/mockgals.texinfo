\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename mockgals.info

@include version.texi
@settitle mockgals @value{VERSION}
@afourpaper

@dircategory Astronomy
@direntry
* mockgals: (MockGals).         Make mock galaxies and stars.
@end direntry

@c Use section titles in cross references, not node titles.
@xrefautomaticsectiontitle on
@c %**end of header





@copying
This manual is for MockGals (version @value{VERSION},
@value{UPDATED}), a program to make mock astronomical objects in a
FITS image and add the appropriate noise.

Copyright @copyright{} 2014 Mohammad Akhlaghi.
@email{akhlaghi@@astr.tohoku.ac.jp}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is available online at
@uref{http://www.gnu.org/copyleft/fdl.html, GNU FDL webpage}.
@end quotation
@end copying





@titlepage
@title MockGals
@subtitle Make mock stars and galaxies in a FITS image with noise.
@subtitle Manual for MockGals version @value{VERSION}, @value{UPDATED}.
@author Mohammad Akhlaghi

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@ifnottex
@node Top, About, (dir), (dir)
@top MockGals
MockGals is a tool to produce mock galaxies and stars based on an
input catalog or randomly into a FITS image of any given size. This
manual is for version @value{VERSION} (@value{UPDATED}).
@end ifnottex

@menu
* About::                       About this manual.
* Quick start::                 Get started.
* Introduction::                An introduction to MockGals.
* Installation::                How to install MockGals.
* Configuring::                 Customizing MockGals.
* Mock Parameters::             Mock profile parameter table.
* How it works::                Mock gals coding guide.
@end menu


@contents

@ifplaintext
@noindent
---------------------------

@noindent
Copyright notice:
@insertcopying
@end ifplaintext















@node About, Quick start, Top, Top
@chapter About

To get started with MockGals please please see @ref{Quick start}.  The
following sections in this chapter are more general discussions.
In the first section we will give a short review of the way modern
science has become intertwined with software and how important it is
for scientists to have very good understanding of the software they
use.  After that your rights as the reader of this document and user of
MockGals are explained and in the end of this chapter we give a short
review of how this manual is available for your use and a short
summary of the manual.







@menu
* Good Science::                Science and its software.
* Your rights::                 Your rights as a user of MockGals.
* Manual formats::              Formats this manual is available in.
* Conventions::
* Summary::
@end menu

@node Good Science, Your rights, About, About
@section Objective/critical science and its software
History of science shows us that no interpretation, model or technique
(software) is perfect.  There are always inevitably unseen faults,
hidden assumptions, simplifications and approximations in all of our
constructs. It is precisely these that will ultimately allow future
generations to find and correct or solve them, thus advancing our
experimental and theoretical knowledge of the universe. Therefore, we
should be as explicit as possible about such approximations and
simplifications. Through keeping software free and transparent (with a
clearly written, detailed and up to date manual) for all scientists,
we can most accurately convey our experiences to users who can build
on those or find their shortcomings, hence facilitating the progress
of science.

With the progress of technology, scientific results are increasingly
becoming more and more dependent on hardware and software
techniques. While in the past, a scientists would gather data and
process them individually to achieve an analysis, today scientits
mainly leave the first two steps to pre-written software libraries,
therefore distancing them selves from the pure observational data.

@quotation
Unfortunately, most persons who have recourse to a computer for
statistical analysis of data are not much interested either in
computer programming or in statistical method, being primarily
concerned with their own proper business. Hence the common use of
library programs and various statistical packages. Most of these
originated in the pre-visual era. The user is not showered with
graphical displays. He can get them only with trouble, cunning and a
fighting spirit. It's time that was changed.
@author F. J. Anscombe. The American Statistician, Vol. 27, No. 1. 1973
@end quotation

Anscombe argues that ``Good statistical analysis is not a purely
routine matter, and generally calls for more than one pass through the
computer''. He showed how four data sets with widely different shapes
(when plotted) give nearly identical output from standard regression
techinques. Thus he showed how wrong it is to only rely on outputs of
standard methods to interpret the data. Although we have much better
graphic displays today, unfortuantely the general situation has not
changed too much from Anscombe's time.  Obscure software, either
closed source or with a bad manual, is certainly one of the main
culprits.  Most of the software packages available today for a
scientist are either closed source or have a bad, out-dated or not
clearly written manual.  Making an interested scientist think twice
before trying to understand the inner workings of a software.  Thus
the wide use of free and transparent software may be one step in a
larger scheme to save the sciences...

@quotation
...from narrow specialization and from an obscurantist faith in the
expert's special skill and in his personal knowledge and authority; a
faith that so well fits our post-rationalistic and post critical age,
proudly dedicated to the destruction of the tradition of rational
philosophy and of rational thought its self.
@author Karl Popper. The logic of scientific discovery. 1959.
@end quotation

To reach this goal, namely to let the users of a software be able to
understand its intricate details at their will, a software has to be
accompanied by a good and up to date manual. The user of a software
cannot claim to understand how it works only based on the experience
they have gained by frequently using it. This kind of subjective
experience is prone to very serious mis-understandings that only help
in producing dogmas and the above mentioned ``obscurationist faith in
the expert's special skill''.  Unfortunately in the commonly used
astronomical softwares at least, most are either closed source or
don't have a good manual. The scientific results that are deduced from
such software are thus not objective, because in the former case
scientists have to look at it as a black box and trust its results on
faith or their subjective experience. In the latter, it is very hard
to find enough time to understand the programming of an open source
project without a clearly written and up to date manual explaining all
the ideas behind the major functions, data structures or objects.

It is certainly time consuming for the author of a software to make
such a manual. But if our greater common experience is considered,
that time, is a time well invested. Because through sharing of these
fundamental ideas and techniques, that define all our scientific
results, and keeping them open to criticism, we can make them more
robust and thus take better steps in our common goal to tackle the
riddles of nature.

Bjarne Stroustrup (creator of the @code{C++} language) says: ``Without
understanding software, you are reduced to believing in magic''.  Ken
Thomson (the designer or the Unix operating system) has says ``I abhor
a system designed for the ``user'' if that word is a coded pejorative
meaning ``stupid and unsophisticated''.'' No scientist would want to
be considered as ``stupid and unsophisticated'', so both these cases
naturally apply much more seriously to programs written for scientific
applications and as scientists we should be loyal to such principles
if we want to remain critical and be objective. 

All our data and models are produced, archived and processed using
hardware and software. If our aim in pursing science is tackling the
riddles of nature (and not merely stacking published papers with our
names on them!) we cannot and should not accept any result through
faith in the programmer who wrote that particular program(s) which
defineys all our scientific results.





@node Your rights, Manual formats, Good Science, About
@section Your rights as a user of MockGals

MockGals is ``free software''; this means that everyone is free to use
it and free to redistribute it on certain conditions. MockGals is not
in the public domain; it is copyrighted and there are restrictions on
its distribution, but these restrictions are designed to permit
everything that a good cooperating citizen would want to do.  What is
not allowed is to try to prevent others from further sharing any
version of MockGals that they might get from you.

Specifically, we want to make sure that you have the right to give
away copies of the programs that relate to MockGals, that you receive
source code or else can get it if you want it, that you can change these
programs or use pieces of them in new free programs, and that you know
you can do these things.

To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights.  For example, if you distribute
copies of the MockGals related programs, you must give the recipients
all the lrights that you have.  You must make sure that they, too,
receive or can get the source code.  And you must tell them their
rights.

Also, for our own protection, we must make certain that everyone finds
out that there is no warranty for the programs that relate to MockGals.
If these programs are modified by someone else and passed on, we want
their recipients to know that what they have is not what we distributed,
so that any problems introduced by others will not reflect on our
reputation.

The precise conditions of the licenses for the programs currently
being distributed that relate to MockGals are found in the General
Public license@footnote{ @url{https://www.gnu.org/copyleft/gpl.html}}
that accompany them.  This manual is covered by the GNU Free
Documentation License@footnote{
@url{https://www.gnu.org/copyleft/fdl.html}}.

The paragraphs above, in this section, belong to the GNU Texinfo manual
and are not written by us! We have just changed the name ``Texinfo''
to ``MockGals'' because it and this manual are released under the same
licenses and it is beautifully written to inform you of your rights.





@node Manual formats, Conventions, Your rights, About
@section Manual Formats and reading recommendations
This manual is available in plain text, HTML, Info, Docbook, PDF and
finally the Texinfo format. The last one is the basis for creating all
the other formats. As an initial introduction the PDF and HTML formats
might be easier to begin using MockGals, but if you would like to
understand the code while reading @ref{How it works}, it is much
easier to do so in the Info format. For example in Emacs, you can have
one window on the code and another on the Info versin of this manual
and follow the functions and explanations together.

Info is a very convenient format particularly useful for software
documentation. We strongly recommend becoming familiar with it if you
are not already because it can significantly enhance your experience
in programming and in your GNU based operating systems user
experience.  Operating systems like Ubuntu, Fedora, Linux Mint,
Debian, OpenSUSE, Red Hat, CentOS or Scientific linux among many
others. Info is very trivial and made for reading manuals. It provides
facilitates to navigate easily in long manuals. To learn more about it
in any GNU/linux terminal you can run: @command{$ info info}. It does
a fantastic job in explaining its self in practice interactively.

By default, the PDF version of this manual is prepared in the A4 paper
size (21.0cm by 29.7cm). In case you prefer a letter size (8.5in by
11in), you can simply change it by following the steps below. You must
have Texinfo and @TeX{} installed on your system, for an explanation
on how to install them see @ref{Installation}.

@enumerate
@item
In the downloaded source directory (lets call it @file{SRC/}), open
the @file{SRC/doc/mockgals.texinfo} Texinfo source file of this
manual.

@item
Delete the line that says @code{@@afourpaper}. It is in the first few
lines of the file.

@item
run @code{$ ./run.sh} in that same directory, this will re-make all
the documenation formats.
@end enumerate





@node Conventions, Summary, Manual formats, About
@section Conventions
@itemize
@item
Commands to be input into the command line as normal user begin with
@command{$}.

@item
Commands that to be input as root (or super-user), start with
@command{#}. Note that you need the root password in order to execute
the latter commands. 

@item
The @command{commands}, @file{file names} and @code{programming codes}
in this manual are written in the respective font face. Be careful not
to include text puctuation marks that might follow them.

@item
When mentioning the order of menus to choose on a graphical user
interface application, we will list them like this example: ``File''
-> ``Save As'', which means to first click on the ``File'' menu and
then choose ``Save As'' in the list that opens.
@end itemize





@node Summary,  , Conventions, About
@section Summary
@ref{Quick start} is a quick start to get you going with MockGals.  It
explains the most frequently used inputs and outputs of mockgals so you can get started. Once you have used it in some simple situations and get a good understanding of what MockGals has to offer, you can go on with the rest of the manual.



















@node Quick start, Introduction, About, Top
@chapter A Quick start

Once MockGals is installed system wide, @pxref{Installation}, you can
simply run @command{mockgals -nm} any where and, 45 mock galaxies and
5 stars will be randomly positioned in a square @code{FITS} image with
sides of 200 pixels. @ref{quickpreview} shows one such random example.

@float Figure, quickpreview
@center@image{./mockgals-figures/s1_noconv,5cm,,./mockgals-figures/s1_noconv.jpg,.jpg}@image{./mockgals-figures/s1_conv, 5cm,,./mockgals-figures/s1_conv.jpg,.jpg}@image{./mockgals-figures/s1_noised, 5cm,,./mockgals-figures/s1_noised.jpg,.jpg}

@caption{Three extentions of the output of @command{mockgals
-nm}. Left: 45 galaxies and 5 stars with no convolution. Middle, The
same image after convolution. Right: After adding noise.}
@end float

After MockGals has finished, two files are added to the directory you
ran it in: @file{mock.fits} and @file{mockinfo.txt}. The first is
generally a multi-extension FITS file and the second is a text file
listing the properties of all the profiles that are positioned in this
image.

To view the full list of options, see @ref{Configuring} where all the
options are explained. The two options used here, namely @command{-m}
and @command{-n}, will output the desired image prior to convolution
(left in @ref{quickpreview}) and the convolved image prior to
adding noise (middle in @ref{quickpreview}) respectively. So if
you don't pass along these two options, you will only get the right
image of @ref{quickpreview}.





@menu
* Viewing multi-extension FITS files:: How to view Multi-ext FITS files.
@end menu

@node Viewing multi-extension FITS files,  , Quick start, Quick start
@section Viewing multi-extension FITS files

If you run @command{mockgals} with the @command{-m} or @command{-n}
options, the output will be a multi-extention FITS file. Lets assume
you use SAOImage ds9@footnote{@url{http://ds9.si.edu/}} (from now on,
we'll call it ds9) to view FITS images. If you ordinarily open a
multi-extension FITS file with ds9 (by double clicking on it for
example), then it will only show you the first extension. To be able
to switch between the extensions you have to follow these menus in the
ds9 window: ``File'' -> ``Open Other'' -> ``Open Multi Ext Cube'' and
then choose the Multi extension FITS file in your computer's file
structure.

The method above is a little tedious to do every time you want view a
multi-extension FITS file. Fortunately ds9 also provides options that
you can add to it. One of those options is @command{-mecube} which
opens a FITS image as a multi-extension data cube, so on the command
line if you run @command{$ds9 -mecube foo.fits}, you can switch
between all the extensions that @file{foo.fits} might have. If
@file{foo.fits} only consists of one extension, then ds9 will open as
usual. 

It is really convenient if you set ds9 to always run with the
@command{-mecube} option on your graphical display. On a GNU/Linux
operating system, you can do this by following the following steps.
Right click on a FITS file and choose ``Properties''. Open the ``Open
With'' tab on top of the Properties window and click on the ``Add''
button. A list of applications will show up, ds9 might already be
present in the list, but don't choose it because it will run with no
options. Below the list is an option ``Use a custom
command''. Click on it and write the following command: @command{ds9
-mecube} in the box and click ``Add''. Then finally choose the command
you just added as the default and click the ``Close'' button.











@node Introduction, Installation, Quick start, Top
@chapter Introduction

As scientists, the only tool we have to test our theories are through
gathering data through scientific experiments, for example experiments
in Physics and Chemistry, or observations, like in Astronomy. There is
always an element of uncertainty in our observations, either because
we don't completely understand the nature of the subject we are
observing or because of noise. 

In order to be able to tackle these two problems, before actually
doing any form of analysis on real data, we first have to calibrate
our data analysis tools with a set of mock subjects where we know the
exact nature of the data with out noise. We also have to simulate
noise and add it to the mock data to try to simulate a real
observation. Then we can apply the techniques we apply to our real
data to that mock data set and see how accurately it measures the
properties we want it to measure. 

This is the fundamental raison d'@^etre of MockGals. In astronomy,
faint galaxies or the fainter parts of bright galaxies are the most
curious aspects of the universe, simply because they are extremely
faint! So any tool we use to observe such real galaxies, has to be
first tested with mock galaxies, because identifying a diffuse faint
galaxy in a large noise is extremely hard and prone to very serious
systematic bias if we don't test our detection methods accurately with
such faint mock galaxies. 

Mock galaxies can also be used to fit known parametric models to the
observed galaxies, for example suppose we have a real galaxy image and
we have a radial functional profile (for example the S@'ersic profile)
and we want to see what values of the free parameters of the S@'ersic
profile fit best with the observed galaxy. In this case, we can make
various mock 2D S@'ersic profiles with various properties and check to
see which one best resembles our dataset. This feature will be a
future addition to MockGals. The infra structure for this capability
is already present, we just have to find the time to add this
capability.





@menu
* Astronomical object profiles.:: Profiles of Astronomical objects.
@end menu

@node Astronomical object profiles.,  , Introduction, Introduction
@section Astronomical object profiles





















@node Installation, Configuring, Introduction, Top
@chapter Installation
MockGals relys on only 3 packages: GSL (GNU scientific library, for
mathematical functions), FFTW (for convolution) and cfitsio (for
reading to and from FITS files).




















@node Configuring, Mock Parameters, Installation, Top
@chapter Configuring MockGals
Currently configuration paramters into MockGals can only be
given through single letter commandline options. The options are
explained below.




















@node Mock Parameters, How it works, Configuring, Top
@chapter Mock parameters
The parameters of the profiles you want to build into a FITS image are
fed to it though a table. In this section we will review how
MockGals reads that table and how best to prepare it.




















@node How it works,  , Mock Parameters, Top
@chapter How mockgals works
In this section we will give a complete review on how MockGals works
and how this is implemented in its coding in order to facilitate your
reading of the code and possibly modifying it and making it better.




















@bye
